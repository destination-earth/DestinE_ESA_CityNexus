default:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind

stages:
  - build
  - deploy
  - cleanup

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
  REG_VERSION: 0.16.1
  WORKING_DIR: "."
  MOBILITY_MODEL_VERSION: $
  PROJECT_NAME: citynexus

.build_template: &build_template
  stage: build
  when: manual
  script:
    - cd $WORKING_DIR
    - |
      if [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-frontend" ]; then
        VERSION=$(cat package.json | grep -m 1 version | sed 's/[^0-9.]//g')
      elif [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-keycloak" ]; then
        VERSION="1.7"
      else
        VERSION=$(grep -m 1 version pyproject.toml | sed 's/[^0-9.]//g')
      fi
    - |
      if [ -n "$MOBILITY_MODEL_VERSION" ]; then
        IMAGE_TAG="${VERSION}-${MOBILITY_MODEL_VERSION}-${PROJECT_NAME}"
      else
        IMAGE_TAG="${VERSION}-${PROJECT_NAME}"
      fi
    - IMAGE_TAG="${VERSION}-${PROJECT_NAME}"
    - export RELEASE_IMAGE="$DOCKER_IMAGE:$IMAGE_TAG"
    - echo Building $RELEASE_IMAGE
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull $EXTRA_PARAMETERS -t $RELEASE_IMAGE .
    - docker push $RELEASE_IMAGE
    - echo "RELEASE_IMAGE=$RELEASE_IMAGE" >> build.env
  artifacts:
    reports:
      dotenv: build.env

build_citynexus_frontend:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-frontend
    EXTRA_PARAMETERS: |
      --build-arg BACKEND_API_ENDPOINT=$BACKEND_API_ENDPOINT
      --build-arg KEYCLOAK_AUTHORITY=${KEYCLOAK_SERVER}realms/${KEYCLOAK_REALM} 
      --build-arg KEYCLOAK_CLIENT_ID=$KEYCLOAK_CLIENT_ID
    WORKING_DIR: "./images/visualization"

build_mobility_model_api_copenhagen:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/mobility-model-api
    WORKING_DIR: "./images/mobility-model-api"
    MOBILITY_MODEL_VERSION: $MOBILITY_MODEL_COPENHAGEN
    EXTRA_PARAMETERS: |
      --build-arg MOBILITY_MODEL_VERSION=$MOBILITY_MODEL_COPENHAGEN
      --build-arg MOBILITY_MODEL_IMAGE_REPO=$MOBILITY_MODEL_IMAGE_REPO

build_mobility_model_api_sevilla:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/mobility-model-api
    WORKING_DIR: "./images/mobility-model-api"
    MOBILITY_MODEL_VERSION: $MOBILITY_MODEL_SEVILLA
    EXTRA_PARAMETERS: |
      --build-arg MOBILITY_MODEL_VERSION=$MOBILITY_MODEL_SEVILLA
      --build-arg MOBILITY_MODEL_IMAGE_REPO=$MOBILITY_MODEL_IMAGE_REPO

build_mobility_model_api_aarhus:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/mobility-model-api
    WORKING_DIR: "./images/mobility-model-api"
    MOBILITY_MODEL_VERSION: $MOBILITY_MODEL_AARHUS
    EXTRA_PARAMETERS: |
      --build-arg MOBILITY_MODEL_VERSION=$MOBILITY_MODEL_AARHUS
      --build-arg MOBILITY_MODEL_IMAGE_REPO=$MOBILITY_MODEL_IMAGE_REPO

build_flood_model_api:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/flood-model-api
    WORKING_DIR: "./images/flood-model-api"

build_citynexus_api:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-api
    EXTRA_PARAMETERS: |
      --build-arg KEYCLOAK_REALM=$KEYCLOAK_REALM 
      --build-arg KEYCLOAK_SERVER=$KEYCLOAK_SERVER
      --build-arg KEYCLOAK_CLIENT_ID=$KEYCLOAK_CLIENT_ID
      --build-arg STORAGE_PATH=$STORAGE_PATH
    WORKING_DIR: "./images/citynexus-api"

build_citynexus_keycloak:
  <<: *build_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-keycloak
    EXTRA_PARAMETERS: |
      --build-arg KEYCLOAK_ADMIN=admin 
      --build-arg KEYCLOAK_ADMIN_PASSWORD=admin
    WORKING_DIR: "./images/keycloak/docker"

.deploy_template: &deploy_template
  stage: deploy
  when: manual
  before_script:
    - cd $WORKING_DIR
    - |
      if [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-frontend" ]; then
        VERSION=$(cat package.json | grep -m 1 version | sed 's/[^0-9.]//g')
      elif [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-keycloak" ]; then
        VERSION="1.7"
      else
        VERSION=$(grep -m 1 version pyproject.toml | sed 's/[^0-9.]//g')
      fi
    - IMAGE_TAG="${VERSION}-${PROJECT_NAME}"
    - export RELEASE_IMAGE="$DOCKER_IMAGE:$IMAGE_TAG"
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$CITYNEXUS_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -v $TARGET_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $CITYNEXUS_SERVER_USER@$TARGET_SERVER_IP "sudo docker stop $TARGET_CONTAINER_NAME || true"
    - ssh $CITYNEXUS_SERVER_USER@$TARGET_SERVER_IP "sudo docker rm $TARGET_CONTAINER_NAME || true"
    - ssh $CITYNEXUS_SERVER_USER@$TARGET_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && sudo docker pull $RELEASE_IMAGE"
    - ssh $CITYNEXUS_SERVER_USER@$TARGET_SERVER_IP "sudo docker run -dit --name $TARGET_CONTAINER_NAME -p $TARGET_PORTS $EXTRA_PARAMETERS $RELEASE_IMAGE"

deploy_citynexus_frontend:
  <<: *deploy_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-frontend
    WORKING_DIR: "./images/visualization"
    TARGET_SERVER_IP: $CITYNEXUS_SERVER_IP
    TARGET_CONTAINER_NAME: citynexus-frontend
    TARGET_PORTS: 8080:80
    EXTRA_PARAMETERS: ""
  dependencies:
    - build_citynexus_frontend

deploy_mobility_model_api:
  <<: *deploy_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/mobility-model-api
    WORKING_DIR: "./images/mobility-model-api"
    TARGET_SERVER_IP: $BACKEND_API_IP
    TARGET_CONTAINER_NAME: mobility-model-api
    TARGET_PORTS: 8001:8000
    EXTRA_PARAMETERS: "--restart on-failure --gpus all -v /home/ubuntu/model_output:/model_output"
  dependencies:
    - build_mobility_model_api

deploy_citynexus_api:
  <<: *deploy_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-api
    WORKING_DIR: "./images/citynexus-api"
    TARGET_SERVER_IP: $BACKEND_API_IP
    TARGET_CONTAINER_NAME: citynexus-api
    TARGET_PORTS: 8000:8000
    EXTRA_PARAMETERS: "-e KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN} -e KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD} --mount source=keycloak_data,target=/opt/keycloak/data"
  dependencies:
    - build_citynexus_api

deploy_citynexus_keycloak:
  <<: *deploy_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-keycloak
    WORKING_DIR: "./images/keycloak/docker"
    TARGET_SERVER_IP: $BACKEND_API_IP
    TARGET_CONTAINER_NAME: citynexus-keycloak
    TARGET_PORTS: 8082:8080
    EXTRA_PARAMETERS: ""
  dependencies:
    - build_citynexus_keycloak

.cleanup_template: &cleanup_template
  stage: cleanup
  when: manual
  allow_failure: true
  artifacts:
    when: always
    paths:
      - dockerps.log
      - dockerimageps.log
  before_script:
    - cd $WORKING_DIR
    - |
      if [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-frontend" ]; then
        VERSION=$(cat package.json | grep -m 1 version | sed 's/[^0-9.]//g')
      elif [ "$DOCKER_IMAGE" == "$CI_REGISTRY_IMAGE/citynexus-keycloak" ]; then
        VERSION="1.0"
      else
        VERSION=$(grep -m 1 version pyproject.toml | sed 's/[^0-9.]//g')
      fi
    - export RELEASE_IMAGE="$DOCKER_IMAGE:$VERSION"
    - apk add --no-cache curl
    - curl --fail --show-error --location "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64" --output /usr/local/bin/reg
    - echo "$REG_SHA256  /usr/local/bin/reg" | sha256sum -c -
    - chmod a+x /usr/local/bin/reg
  script:
    # remove the possibly created image from the registry
    - docker image rm $RELEASE_IMAGE
    - /usr/local/bin/reg rm -d --auth-url $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $RELEASE_IMAGE || echo "Image was not in registry..."
  after_script:
    - docker ps -a > dockerps.log 2>&1
    - docker image ls > dockerimageps.log 2>&1


cleanup_citynexus_frontend:
  <<: *cleanup_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-frontend
    WORKING_DIR: "./images/visualization"

cleanup_mobility_model_api:
  <<: *cleanup_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/mobility-model-api
    WORKING_DIR: "./images/mobility-model-api"

cleanup_citynexus_api:
  <<: *cleanup_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-api
    WORKING_DIR: "./images/citynexus-api"

cleanup_citynexus_keycloak:
  <<: *cleanup_template
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/citynexus-keycloak
    WORKING_DIR: "./images/keycloak/docker"
